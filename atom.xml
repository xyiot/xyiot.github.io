<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三余无梦生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-01T12:11:16.320Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>三鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缺舟</title>
    <link href="http://yoursite.com/2019/04/01/begin/"/>
    <id>http://yoursite.com/2019/04/01/begin/</id>
    <published>2019-04-01T10:00:00.000Z</published>
    <updated>2019-04-01T12:11:16.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。"><a href="#思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。" class="headerlink" title="思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。"></a>思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。&quot;&gt;&lt;a href=&quot;#思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。&quot; class=&quot;headerlink&quot; title=&quot;思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。&quot;&gt;&lt;/a&gt;思绪
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ssl pinning</title>
    <link href="http://yoursite.com/2017/10/01/ssl-pinning/"/>
    <id>http://yoursite.com/2017/10/01/ssl-pinning/</id>
    <published>2017-10-01T00:59:58.000Z</published>
    <updated>2019-04-09T06:08:53.205Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssl-pinning-mode"><a href="#ssl-pinning-mode" class="headerlink" title="ssl pinning mode"></a>ssl pinning mode</h1><p>https抓包的问题，工作的一个小争论引发的，不相信https可以抓包分析数据，非要我演示一次。https抓包其实早就已经烂大街，本着用事实说话的方式，安装了Charles，发现竟然有部分如淘宝，支付宝的包无法解析，jd的是正常的，好奇的查了一下，才知道现在有ssl pinning mode这个东西。</p><h2 id="简述一下https的连接过程"><a href="#简述一下https的连接过程" class="headerlink" title="简述一下https的连接过程"></a>简述一下https的连接过程</h2><p><img src="/2017/10/01/ssl-pinning/1.gif" alt></p><h3 id="上图中实线部分是必须的，虚线部分是可选的。该流程完成了两个任务：服务器身份的验证、加密传输对称加密密钥。"><a href="#上图中实线部分是必须的，虚线部分是可选的。该流程完成了两个任务：服务器身份的验证、加密传输对称加密密钥。" class="headerlink" title="上图中实线部分是必须的，虚线部分是可选的。该流程完成了两个任务：服务器身份的验证、加密传输对称加密密钥。"></a>上图中实线部分是必须的，虚线部分是可选的。该流程完成了两个任务：服务器身份的验证、加密传输对称加密密钥。</h3><p>1、client hello和 server hello表示双方要建立一个加密会话。</p><p>2、服务器把数字证书传输给客户端，证书中包含服务器公钥，客户端用公钥解析证书中的数字签名，可以验证服务器的身份。</p><p>3、Server Hello Done表示hello 流程结束。</p><p>4、客户端生成一个对称加密密钥，用于实际数据的加密传输，并用服务器的公钥加密，把对生成的密钥传递给服务器。同时携带一个用刚刚生成的加密密钥加密的“client finished”。</p><p>5、服务器收到对称加密密钥，并尝试用该密钥解密加密字段，如能得到明文“client finished”，认为该密钥有效，可以用于之后的数据加密传输。同时用该密钥加密“server finished”，传递给客户端。</p><p>6、客户端用对称机密密钥解密，如能得到明文“server finished”，客户端认为该服务器已经正确的接收到对称密钥。</p><p>7、加密数据传输开始。</p><blockquote><p>虚线部分是服务器端要求验证客户身份,和双向认证有关。</p></blockquote><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><ol><li>内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。 </li><li>身份认证。保证用户访问的是百度服务，即使被DNS劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持 </li><li>数据完整性。防止内容被第三方冒充或者篡改。</li></ol><h3 id="带来的问题：中间人攻击（MITM）"><a href="#带来的问题：中间人攻击（MITM）" class="headerlink" title="带来的问题：中间人攻击（MITM）"></a>带来的问题：中间人攻击（MITM）</h3><p><img src="/2017/10/01/ssl-pinning/2.jpeg" alt></p><ol><li>客户端首先要向远程的服务器发送建立连接的请求，并带有自己的支持的加解密的方式级别，这个过程经过了中间人的窃听，中间人把消息修改后发给了真正的目的地——服务端</li><li>服务端收到了要建立https链接的请求后，会发送当时从证书签发机构签发的公钥证书。这个过程中中间人又窃听了，然后中间人替换上自己的证书后又转发给了客户端。</li><li>客户端收到了中间人发过来的公钥证书，验证证书的真伪，并产生随机的对称加密的密钥，用中间人发的公钥加密后发给了中间人。由于刚才客户端收到的公钥证书本身就是中间人产生的，所以中间人用相应的私钥就解开了，拿到了客户端产生的那个随机产生的对称加密密钥。中间人再用刚才服务端返回的公钥证书加密这个客户端产生的用来对称加密的密钥，发给服务端。</li><li>服务端收到了当时用自己下发的公钥的证书加密的对称加密密钥，用自己的私钥解密，也得到了对称加密的密钥。</li></ol><blockquote><p>用Charles来搞是比较常见的，网上的教程也是一把一把的，大部分https的数据包都的可以解析出来，但是阿里系的不行。</p></blockquote><h3 id="解决中间人攻击的办法：ssl-pinning-mode"><a href="#解决中间人攻击的办法：ssl-pinning-mode" class="headerlink" title="解决中间人攻击的办法：ssl pinning mode"></a>解决中间人攻击的办法：ssl pinning mode</h3><ol><li>简单点说就是：ssl pinning就是client能够把server的证书和一个已知的server的证书的拷贝做对比，通过把server的ssl 证书捆绑到程序中就可以达到目的</li><li>如果还是想获取接口请求参数估计只能从客户端逆向入手了，类似于iOS上的Snoop-it一类的工具，网上实际上也有很完整的解决方案了，实际上就是hook的方式将此次校验的结果返回true或者干脆不让其做校验，前提是手机一定要越狱，开源<a href="https://github.com/nabla-c0d3/ssl-kill-switch2" target="_blank" rel="noopener">方案地址</a>，具体原理可以<a href="https://nabla-c0d3.github.io/blog/2016/02/21/ssl-kill-switch-twitter/" target="_blank" rel="noopener">参考</a>。</li><li>其实做到https+强制pinning就很少有人搞的动了，还担心就加上双向认证，关键还有就是客户端的代码质量。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ssl-pinning-mode&quot;&gt;&lt;a href=&quot;#ssl-pinning-mode&quot; class=&quot;headerlink&quot; title=&quot;ssl pinning mode&quot;&gt;&lt;/a&gt;ssl pinning mode&lt;/h1&gt;&lt;p&gt;https抓包的问题，工作的
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssl" scheme="http://yoursite.com/tags/ssl/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Android Facede</title>
    <link href="http://yoursite.com/2016/08/01/Android-Facede/"/>
    <id>http://yoursite.com/2016/08/01/Android-Facede/</id>
    <published>2016-08-01T00:59:58.000Z</published>
    <updated>2019-04-09T06:10:38.202Z</updated>
    
    <content type="html"><![CDATA[<p># </p><h1 id="Android外观模式的应用"><a href="#Android外观模式的应用" class="headerlink" title="Android外观模式的应用"></a>Android外观模式的应用</h1><pre><code>这是一个`app`最初的项目结构  </code></pre><p><img src="/2016/08/01/Android-Facede/1.png" alt></p><p>所有的页面都放在<code>activities</code>，自定义<code>view</code>放在<code>widget</code>，网络相关的封装在<code>network</code>，所有工具类放在<code>utils</code>，少数的<code>xxxManager</code>单例藏在某个包下面，因为少没必要过度提炼就这样吧…<br>没什么问题，项目上线！  </p><p>随着项目迭代，越来越多的页面来了，数据库的表也多起来了，工具类更是爆炸性增长，还不排除有些工具类还在<code>activity</code>里面没来得及提炼出来，<code>xxxManager</code>散落一地，<code>callback</code>到处都是…各个包的类都在快速增长</p><p>如果用线来表示相互间的调用，那么整个项目就是一个毛线团，找代码都开始难找了<br>那么这时候就改理一理这个线团了</p><p>之前app没有一个明确的职责分层，横向依赖很严重，小改伤筋动骨</p><h5 id="AppContext与外观模式的应用"><a href="#AppContext与外观模式的应用" class="headerlink" title="AppContext与外观模式的应用"></a>AppContext与外观模式的应用</h5><p>随着业务的发展，<code>app</code>里面的组件，业务线也会逐渐的增多。<br>每个业务线一个<code>module</code>，那么新的问题就来了，<code>module</code>之间的通信问题，横向依赖问题。  </p><p>每个<code>module</code>除了在自己的地盘处理业务，还有可能给其他module提供服务，或者这个<code>module</code>就是一个<code>plugin</code>风格的业务组件。<br>比较粗暴的做法，直接引用<code>module</code>，想调谁就引用谁，那么这和之前单<code>module</code>，类的横向引用又有什么本质上的区别呢？<br>这里我们可以借鉴下<code>Android</code>的<code>Context</code>类的设计，<code>Context</code>就是封装了一大堆<code>Android</code>的子系统（通过<code>getSystemService</code>获取），处理在Android环境下的通信问题。<br>那么我们可以依葫芦画瓢的设计一个我们自己的<code>AppContext</code>，我们的业务<code>module</code>或者组件都是在<code>AppContext</code>环境下，他们之间的通信就通过<code>AppContext</code>，具体业务就交给具体的<code>modul</code>e实现.<br>如果设计多个业务<code>module</code>的协作，那么也应该由<code>AppContext</code>屏蔽协作的细节，这是一个很典型的外观模式的应用。<br>在面向对象编程范式内，很多问题都可以通过引入额外的一层来解决<br><img src="/2016/08/01/Android-Facede/2.png" alt>  </p><p>有些基础组件<code>module</code>或通用性非常高的<code>module</code>，可以下沉到<code>AppContext</code>下面</p><p><code>AppContext</code>的核心职责就是封装好<code>app</code>所用到的子系统（审视下以前代码里面的单例<code>manager</code>，思考一下他是不是能作为<code>app</code>的一个子系统工作）来统一管理服务，无论该服务是基于<code>Android</code>，还是业务<code>module</code>，还是其他第三方组件。当然这里也应该<code>module</code>与<code>app</code>通信，一些app级别的配置也可以在这里处理</p><p>在实际操作中，一定要渐进式的处理，主要是因为：</p><ul><li>互联网时代不能让飞机停下来，做到在天上就给飞机动了手术</li><li>可以逐渐验证自己的方案，不要一开始就置自己于险境</li></ul><blockquote><p>比如目前工程中moduleA直接依赖moduleB调用接口，重构过程中不必直接取消依赖（不要影响目前的业务），在AppContext中添加一个moduleB的service，这个service代理moduleB提供的接口服务，然后moduleA调用接口逐渐的转向AppContext提供的方式，当转得差不多的时候就断掉moduleA与moduleB之间的依赖。</p></blockquote><p>对于有些业务线的<code>module</code>，完全可以把他当做一个app来对待  </p><p><img src="/2016/08/01/Android-Facede/3.png" alt>  </p><h5 id="AppContext只是解决了module之间的通信或者是子系统的管理"><a href="#AppContext只是解决了module之间的通信或者是子系统的管理" class="headerlink" title="AppContext只是解决了module之间的通信或者是子系统的管理"></a>AppContext只是解决了module之间的通信或者是子系统的管理</h5><blockquote><p>由多收缩到一的问题（统一依赖AppContext），只限于单进程，还没有跨进程，跨app，关于跨进程local，remote的问题，另开一贴讲设计思路与实现</p></blockquote><p>一个<code>App</code>除了通信，还有一些工具类，一些的<code>style</code>，<code>theme</code>，<code>resource</code>相关的定义。  </p><p>很多<code>app</code>都会搞一个类似<code>core</code>，<code>common</code>的<code>module</code>，一股脑儿的扔里面，这玩意儿到后面绝对是一锅东北菜，乱炖的感觉。  </p><p>对于<code>module</code>层级下面的<code>util</code>，只能是高度通用的<code>util</code>才放到下面，命名一定要体现其具体功能，千万不要直接<code>utils</code>，<code>StringUtils</code>等很模糊的命名，推荐<code>Logger</code>，<code>DeviceUtil</code>，<code>UrlUtil</code>等一眼就能看出其具体功能的<code>util</code>。  </p><p>对于<code>resource</code>相关的定义，单独一个<code>module</code><br>这些<code>module</code>都会逐渐沉淀下来，以后<code>app</code>按需依赖.<br><img src="/2016/08/01/Android-Facede/4.png" alt><br>黑线一下的就是业务线开发的基础，是不是有点类似<code>android.jar</code>的感觉</p><h4 id="UserCase"><a href="#UserCase" class="headerlink" title="UserCase"></a>UserCase</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">人之所以聪明，是因为人会创造工具并使用</span><br><span class="line"></span><br><span class="line">重构的基础是人员，如何照顾开发的情绪，如何渐进式的进行重构，如何借助工具进行重构，重构不等于重写，重构不等于业务都给我停下让路</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;# &lt;/p&gt;
&lt;h1 id=&quot;Android外观模式的应用&quot;&gt;&lt;a href=&quot;#Android外观模式的应用&quot; class=&quot;headerlink&quot; title=&quot;Android外观模式的应用&quot;&gt;&lt;/a&gt;Android外观模式的应用&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;这是一个
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>libco</title>
    <link href="http://yoursite.com/2016/04/08/libco/"/>
    <id>http://yoursite.com/2016/04/08/libco/</id>
    <published>2016-04-08T14:39:02.000Z</published>
    <updated>2019-04-08T15:34:19.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="co-create-初始化相关"><a href="#co-create-初始化相关" class="headerlink" title="co_create  初始化相关"></a>co_create  初始化相关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int co_create( stCoRoutine_t **ppco,const stCoRoutineAttr_t *attr,pfn_co_routine_t pfn,void *arg )</span><br><span class="line"></span><br><span class="line">static stCoRoutineEnv_t* g_arrCoEnvPerThread[ 204800 ] = &#123; 0 &#125;;</span><br><span class="line"></span><br><span class="line">void co_init_curr_thread_env()</span><br></pre></td></tr></table></figure><ol><li><p>将Env_t信息保存在全局变量g_arrCoEnvPerThread中对应于threadId的位置</p></li><li><p>创建一个空协程，被设置为当前Env_t的main routine，用于运行该线程的主逻辑</p></li><li><p>Epoll_t相关的信息初始化，管理时间片相关</p></li><li><p>stCoRoutine_t 保存每个协程的信息</p></li></ol><ol><li><p>co_create_env</p><p>创建协程的函数是co_create_env()，每个协程有自己密切相关的结构stCoRoutine_t</p></li><li><p>支持共享栈</p><p>所以共享栈采用的方式就是每次发生协程切换的时候，把实际用到的栈内容stack_bp   stack_sp通过save_stack_buffer来保存到malloc的内存中去，然后调用coctx_swap进行寄存器信息的切换，再把切换进来的新协程之前以相同方式保存的栈数据再拷贝到上面的共享栈空间的对应的内存位置上去(栈指针在coctx_swap已经更新完了，这里只是填补数据的作用，而且每个协程切换前后一直使用相同的共享栈，即使有局部指针也没有问题)，从而大大增加了内存的利用效率。</p></li></ol><h2 id="协程执行"><a href="#协程执行" class="headerlink" title="协程执行"></a>协程执行</h2><p>协程 = 回调 + 栈内存</p><p>协程执行实际是协程的切换，包括协程上下文（寄存器状态）的切换，回调执行之后会再次切换回来</p><p>如果协程中创建了新的协程，则会有嵌套的协程切换</p><p>co_resume</p><p>同时创建的协程第一次启动也是使用这个接口，并且在第一次启动的时候会初始化特殊的coctx_t结构，在协程执行结束后，会自动设置cEnd=1，同时将自己yield出去</p><p>栈帧stack frame layout：</p><p><img src="/2016/04/08/libco/illustration-1.png" alt></p><p>调用子函数时，父函数从右到左将函数入栈，最后将返回地址入栈保存后，跳到子函数的地址执行。子函数压栈保存父函数的 %ebp，并将 %ebp 设置为当前 %esp。子函数通过 %ebp + 4 读取参数1，%ebp + 8 读取参数2</p><p><img src="/2016/04/08/libco/illustration-2.png" alt></p><p>libco程序的第一个协程呢，假如第一个协程yield时，CPU控制权让给谁呢？关于这个问题，我们首先要明白这“第一个”协程是什么。实际上，libco的第一个协程，即执行main函数的协程，是一个特殊的协程。这个协程又可以称作主协程，它负责协调其他协程的调度执行（后文我们会看到，还有网络 </p><p>I/O以及定时事件的驱动），它自己则永远不会yield，不会主动让出 </p><p>CPU。不让出CPU，不等于说它一直霸占着CPU。我们知道CPU执行权有两种转移途径，一是通过yield让给调用者，其二则是resume启动其他协程运行。</p><h4 id="阻塞调用Hook"><a href="#阻塞调用Hook" class="headerlink" title="阻塞调用Hook"></a>阻塞调用Hook</h4><p>通过glibc中dlfcn.h的dlsym和RTLD_NEXT结合起来，从而给标准库函数添加钩子</p><p>#define HOOK_SYS_FUNC(name) if( !g_sys_##name##_func ) { g_sys_##name##_func = (name##_pfn_t)dlsym(RTLD_NEXT,#name); }</p><p>epoll 基于事件驱动的IO多路复用技术，1. mmap，2. 红黑树，33. rdlist</p><p><strong>int</strong> <strong>epoll_create(**</strong>int<strong> </strong>size);**</p><p>创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大 int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);</p><p>epoll的事件注册函数 int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);</p><p>等待事件的产生</p><h4 id="协程的事件管理"><a href="#协程的事件管理" class="headerlink" title="协程的事件管理"></a>协程的事件管理</h4><ol><li><p>初始化 AllocEpoll</p></li><li><p>添加监听事件 co_poll</p></li><li><p>轮询 co_eventloop</p></li></ol><h4 id="感受"><a href="#感受" class="headerlink" title="感受:"></a>感受:</h4><blockquote><p>总体代码质量并不是特别好，总感觉为了使用C++而使用C++，甚至有些命名都不是 特别规范，最好理解的协程库还是云风c语言版本的，强力推荐，libco最大的优势就是作为微信内部框架的底层库，在线上也承受了巨大的流量，稳定跑到几千台服务器上，其他的都不重要。</p></blockquote><p>libco github ：<a href="https://github.com/Tencent/libco" target="_blank" rel="noopener">地址</a></p><p>云风 github： <a href="https://github.com/cloudwu/coroutine/" target="_blank" rel="noopener">地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;co-create-初始化相关&quot;&gt;&lt;a href=&quot;#co-create-初始化相关&quot; class=&quot;headerlink&quot; title=&quot;co_create  初始化相关&quot;&gt;&lt;/a&gt;co_create  初始化相关&lt;/h2&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="第三方源码库" scheme="http://yoursite.com/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%BA%90%E7%A0%81%E5%BA%93/"/>
    
    
      <category term="协程" scheme="http://yoursite.com/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>stun流程理解</title>
    <link href="http://yoursite.com/2011/01/01/stun/"/>
    <id>http://yoursite.com/2011/01/01/stun/</id>
    <published>2011-01-01T00:59:58.000Z</published>
    <updated>2019-04-08T14:33:13.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol><li><p>A向S发出Allocate Request，请求S在自己的IP地址上为A分配一个端口。</p></li><li><p>S收到A的Allocate请求后，为A分配一个端口aport。并向A返回一个Allocate Response。</p></li><li><p>A向S发出Channel Bind请求，请求将B的（IP地址UDP端口）对绑定到一个Channel号ano上。</p></li></ol><p>4.S收到Channel Bind请求后，将Channel号ano和B的（IP地址UDP端口）对绑定，并向A返回一个Channel Bind Success回复。</p><p>5.之后A可以用Channel Data命令通过Channel号ano向B发消息。Channel Data命令实际上将消息发给了S，S再通过为A分配的端口aport向B转发。</p><ol start="6"><li>B收到的A的消息中，源地址显示的是S为A分配的中转地址（S的IP地址:aport），B可以直接向这个中转地址发消息，S会将其转发给A。</li></ol><p><strong>stun协议的缺点是服务器负载太高，容易成为性能瓶颈。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A向S发出Allocate Request，请求S在自己的IP地址上为A分配一个端口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="协议" scheme="http://yoursite.com/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="NAT" scheme="http://yoursite.com/tags/NAT/"/>
    
      <category term="ICE" scheme="http://yoursite.com/tags/ICE/"/>
    
  </entry>
  
</feed>
