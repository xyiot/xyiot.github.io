<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三余无梦生</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-01T12:11:16.320Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>三鱼</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缺舟</title>
    <link href="http://yoursite.com/2019/04/01/begin/"/>
    <id>http://yoursite.com/2019/04/01/begin/</id>
    <published>2019-04-01T10:00:00.000Z</published>
    <updated>2019-04-01T12:11:16.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。"><a href="#思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。" class="headerlink" title="思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。"></a>思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。&quot;&gt;&lt;a href=&quot;#思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。&quot; class=&quot;headerlink&quot; title=&quot;思绪总是一闪而过，如梦幻泡影，皆为虚妄，不执着，冷眼看。&quot;&gt;&lt;/a&gt;思绪
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ssl pinning</title>
    <link href="http://yoursite.com/2011/01/01/ssl-pinning/"/>
    <id>http://yoursite.com/2011/01/01/ssl-pinning/</id>
    <published>2011-01-01T00:59:58.000Z</published>
    <updated>2019-04-08T14:33:23.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssl-pinning-mode"><a href="#ssl-pinning-mode" class="headerlink" title="ssl pinning mode"></a>ssl pinning mode</h1><p>https抓包的问题，工作的一个小争论引发的，不相信https可以抓包分析数据，非要我演示一次。https抓包其实早就已经烂大街，本着用事实说话的方式，安装了Charles，发现竟然有部分如淘宝，支付宝的包无法解析，jd的是正常的，好奇的查了一下，才知道现在有ssl pinning mode这个东西。</p><h2 id="简述一下https的连接过程"><a href="#简述一下https的连接过程" class="headerlink" title="简述一下https的连接过程"></a>简述一下https的连接过程</h2><p><img src="/2011/01/01/ssl-pinning/1.gif" alt></p><h3 id="上图中实线部分是必须的，虚线部分是可选的。该流程完成了两个任务：服务器身份的验证、加密传输对称加密密钥。"><a href="#上图中实线部分是必须的，虚线部分是可选的。该流程完成了两个任务：服务器身份的验证、加密传输对称加密密钥。" class="headerlink" title="上图中实线部分是必须的，虚线部分是可选的。该流程完成了两个任务：服务器身份的验证、加密传输对称加密密钥。"></a>上图中实线部分是必须的，虚线部分是可选的。该流程完成了两个任务：服务器身份的验证、加密传输对称加密密钥。</h3><p>1、client hello和 server hello表示双方要建立一个加密会话。</p><p>2、服务器把数字证书传输给客户端，证书中包含服务器公钥，客户端用公钥解析证书中的数字签名，可以验证服务器的身份。</p><p>3、Server Hello Done表示hello 流程结束。</p><p>4、客户端生成一个对称加密密钥，用于实际数据的加密传输，并用服务器的公钥加密，把对生成的密钥传递给服务器。同时携带一个用刚刚生成的加密密钥加密的“client finished”。</p><p>5、服务器收到对称加密密钥，并尝试用该密钥解密加密字段，如能得到明文“client finished”，认为该密钥有效，可以用于之后的数据加密传输。同时用该密钥加密“server finished”，传递给客户端。</p><p>6、客户端用对称机密密钥解密，如能得到明文“server finished”，客户端认为该服务器已经正确的接收到对称密钥。</p><p>7、加密数据传输开始。</p><blockquote><p>虚线部分是服务器端要求验证客户身份,和双向认证有关。</p></blockquote><h3 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h3><ol><li>内容加密。浏览器到百度服务器的内容都是以加密形式传输，中间者无法直接查看原始内容。 </li><li>身份认证。保证用户访问的是百度服务，即使被DNS劫持到了第三方站点，也会提醒用户没有访问百度服务，有可能被劫持 </li><li>数据完整性。防止内容被第三方冒充或者篡改。</li></ol><h3 id="带来的问题：中间人攻击（MITM）"><a href="#带来的问题：中间人攻击（MITM）" class="headerlink" title="带来的问题：中间人攻击（MITM）"></a>带来的问题：中间人攻击（MITM）</h3><p><img src="/2011/01/01/ssl-pinning/2.jpeg" alt></p><ol><li>客户端首先要向远程的服务器发送建立连接的请求，并带有自己的支持的加解密的方式级别，这个过程经过了中间人的窃听，中间人把消息修改后发给了真正的目的地——服务端</li><li>服务端收到了要建立https链接的请求后，会发送当时从证书签发机构签发的公钥证书。这个过程中中间人又窃听了，然后中间人替换上自己的证书后又转发给了客户端。</li><li>客户端收到了中间人发过来的公钥证书，验证证书的真伪，并产生随机的对称加密的密钥，用中间人发的公钥加密后发给了中间人。由于刚才客户端收到的公钥证书本身就是中间人产生的，所以中间人用相应的私钥就解开了，拿到了客户端产生的那个随机产生的对称加密密钥。中间人再用刚才服务端返回的公钥证书加密这个客户端产生的用来对称加密的密钥，发给服务端。</li><li>服务端收到了当时用自己下发的公钥的证书加密的对称加密密钥，用自己的私钥解密，也得到了对称加密的密钥。</li></ol><blockquote><p>用Charles来搞是比较常见的，网上的教程也是一把一把的，大部分https的数据包都的可以解析出来，但是阿里系的不行。</p></blockquote><h3 id="解决中间人攻击的办法：ssl-pinning-mode"><a href="#解决中间人攻击的办法：ssl-pinning-mode" class="headerlink" title="解决中间人攻击的办法：ssl pinning mode"></a>解决中间人攻击的办法：ssl pinning mode</h3><ol><li>简单点说就是：ssl pinning就是client能够把server的证书和一个已知的server的证书的拷贝做对比，通过把server的ssl 证书捆绑到程序中就可以达到目的</li><li>如果还是想获取接口请求参数估计只能从客户端逆向入手了，类似于iOS上的Snoop-it一类的工具，网上实际上也有很完整的解决方案了，实际上就是hook的方式将此次校验的结果返回true或者干脆不让其做校验，前提是手机一定要越狱，开源<a href="https://github.com/nabla-c0d3/ssl-kill-switch2" target="_blank" rel="noopener">方案地址</a>，具体原理可以<a href="https://nabla-c0d3.github.io/blog/2016/02/21/ssl-kill-switch-twitter/" target="_blank" rel="noopener">参考</a>。</li><li>其实做到https+强制pinning就很少有人搞的动了，还担心就加上双向认证，关键还有就是客户端的代码质量。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ssl-pinning-mode&quot;&gt;&lt;a href=&quot;#ssl-pinning-mode&quot; class=&quot;headerlink&quot; title=&quot;ssl pinning mode&quot;&gt;&lt;/a&gt;ssl pinning mode&lt;/h1&gt;&lt;p&gt;https抓包的问题，工作的
      
    
    </summary>
    
      <category term="安全" scheme="http://yoursite.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ssl" scheme="http://yoursite.com/tags/ssl/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>stun流程理解</title>
    <link href="http://yoursite.com/2011/01/01/stun/"/>
    <id>http://yoursite.com/2011/01/01/stun/</id>
    <published>2011-01-01T00:59:58.000Z</published>
    <updated>2019-04-08T14:33:13.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol><li><p>A向S发出Allocate Request，请求S在自己的IP地址上为A分配一个端口。</p></li><li><p>S收到A的Allocate请求后，为A分配一个端口aport。并向A返回一个Allocate Response。</p></li><li><p>A向S发出Channel Bind请求，请求将B的（IP地址UDP端口）对绑定到一个Channel号ano上。</p></li></ol><p>4.S收到Channel Bind请求后，将Channel号ano和B的（IP地址UDP端口）对绑定，并向A返回一个Channel Bind Success回复。</p><p>5.之后A可以用Channel Data命令通过Channel号ano向B发消息。Channel Data命令实际上将消息发给了S，S再通过为A分配的端口aport向B转发。</p><ol start="6"><li>B收到的A的消息中，源地址显示的是S为A分配的中转地址（S的IP地址:aport），B可以直接向这个中转地址发消息，S会将其转发给A。</li></ol><p><strong>stun协议的缺点是服务器负载太高，容易成为性能瓶颈。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A向S发出Allocate Request，请求S在自己的IP地址上为A分配一个端口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="协议" scheme="http://yoursite.com/categories/%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="NAT" scheme="http://yoursite.com/tags/NAT/"/>
    
      <category term="ICE" scheme="http://yoursite.com/tags/ICE/"/>
    
  </entry>
  
</feed>
